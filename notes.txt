What is Angular?
    JS framework that allows you to create a SPA.

Angular CLI
    DOC: https://cli.angular.io/
    Uses nodejs behind the scenes to bundle and optimise our project.
    npm used to manage packages for the angular project.

Course structure
    Basics
    Components and Databinding
    Drectives
    Services and Dependency Injection
    Routing
    Observables
    Forms
    Pipes
    Http 
    Authentication
    Optimizations and NgModules
    Deployment
    Animations and testing angular applications

How does Angular app work?
    1. main.ts 
        This is the file that executed first and it loads the AppModule defined in the app.module.ts
    2. app.module.ts
        exports a class AppModule
        This class is bootstraped with (wrapped with)  AppComponent exported from app.component.ts file
    3. app.component.ts
        Exports class AppComponent
        Wraps the template in app.component.html

Components!
    A normal ts file where we define a component which can be reused.
    Each component is associated with Component decorater from "@angular/core" module which takes two main
    param: 
        1. Selector 
        2. template
    ex: @Component({
            selector: 'app-server',
            templateUrl: './server.component.html'
        })

Generate components automatically:
    ==> ng g c servers    Observables
    ==> ng generate component servers
    Creates servers folder in app wiht the servers.component.ts , servers.compoment.html, servers.compoment.css
    and servers.compoment.spec.ts

Multiple ways to use component selector:
    selector: 'app-server'  //as a html tag
    usage: <app-server></app-server>

    selector: '[app-server]'  //as an attribute
    usage: <div app-server></div>

    selector: '.app-server' //as a class
    usage: <div class="app-server"></div>


AppModule
    1. exported from app.module.ts
    2. It is mainly used to bundle the different components in your app into packages.
    3. Just a class which is decorated by the NgModule decorator

    The NgModule Decorator:
        Takes 4 properties:
            1. bootstrap: which component should you recognise in the index.html file
            2. declarations: register all the components here

Databinding
    1. String Interpolation
    2. Property Binding
    3. Event Binding
    4. Two way binding

String Interpolation
    Any variable declared inside the component class can be access within {{ <variable name here > }}.
    This is curly braces just convert the incoming value into string, hence you can use a function call also 
    inside this.

Property Binding
    When to use this? 
    When you want to control the property of a HTMl tag using the component variables. Ex:
        <p>{{ allowNewServer }} : value comes from string interpolation</p>
        <p [innerText]="allowNewServer"></p>
    
    NOTE: Warp the html property with [] to link it to the variable

Event Binding
    Similar to property binding, but instead of [], you wrap the event listener property by (). Ex:
        <button class="btn btn-primary" (click)="onCreateServer()">Add Server</button>
    Before warapping the events, remove the on as shown above.
        onclick => (click)

Bindable Properties and Events
    How do you know to which Properties or Events of HTML Elements you may bind? You can basically bind to all Properties
    and Events - a good idea is to console.log()  the element you're interested in to see which properties and events it offers.
    
    Important: For events, you don't bind to onclick but only to click (=> (click)).
    The MDN (Mozilla Developer Network) offers nice lists of all properties and events of the element you're interested in. 
    Googling for YOUR_ELEMENT properties  or YOUR_ELEMENT events  should yield nice results.

Using the event object:
    <input type="text" (input)="onServerNameChange($event)">

    $event is the special syntax that angular uses to apss the event object into the function.


    In the function you must typecast the event.target since its of tye HTMLInputElement, typescript rules. 
        onServerNameChange(event: Event) {
            this.serverName = (<HTMLInputElement>event.target).value;
        }


TWO WAY Binding
Required for Two-Way-Binding!
    Important: For Two-Way-Binding (covered in the next lecture) to work, you need to enable the ngModel  directive. 
    This is done by adding the FormsModule  to the imports[]  array in the AppModule.
    You then also need to add the import from @angular/forms  in the app.module.ts file:
        import { FormsModule } from '@angular/forms';

Two way binding:
    Combination of Property binding and event binding.
    Done using ngModel directive

Directives
    They are instructions in the DOM.
    Couple of useful directives:
        1. ngIf : used in html dom, must be prefiexed with * . Also can be clubbed with else:
            <p *ngIf="serverCreated; else noServer">{{ serverName }}</p>
            <ng-template #noServer>
                <p >No server was created</p>
            </ng-template>
        2. ngStyle: dynamically assign a style
        3. ngClass: dynmaically add/remove css class
        5. ngFor

Strutural directives vs Attribute directives
    Structural: these are the ones used with * in the front. Ex: ngFor, ngIf
    Attribute: These look like html attributes itself. Ex: ngStyle, ngClass
        
ngFor using index
    Ex: *ngFor="let server in servers; let i=index"

Shortcut to creating components
    1. ng g c recepies --spec false
        Does not create spec file
    2. ng g c recepies/recepie-list --spec false
        Creates a component recepie-list within the recepies folder


Debugging Angular app:
    1. Use debugger to pause on logical errors
    2. Error message in console
    3. Use the chrome extension Augury (really cool)





















Typescript
    1. Initialize a varaible with certain type
        class Test {
            public name: string;
        }

        By default it is public if the variable is not declared as public.
        Declared as private means it cant be accessed from outside the class.

    2. Initialize variables using constructor
        Two ways exist:
            class Test {
                public name: string;
                public amount: number;

                constructor(name: string, amount: number) {
                    this.name = name;
                    this.amount = amount;
                }
            }

            class Test {
                constructor(public name: string, public amount: number) {}
            }

    3. Indicate variable as an array of certain type
        public recipes: Recipe[] = [];
