What is Angular?
    JS framework that allows you to create a SPA.

Angular CLI
    DOC: https://cli.angular.io/
    Uses nodejs behind the scenes to bundle and optimise our project.
    npm used to manage packages for the angular project.

Course structure
    Basics
    Components and Databinding
    Drectives
    Services and Dependency Injection
    Routing
    Observables
    Forms
    Pipes
    Http 
    Authentication
    Optimizations and NgModules
    Deployment
    Animations and testing angular applications

How does Angular app work?
    1. main.ts 
        This is the file that executed first and it loads the AppModule defined in the app.module.ts
    2. app.module.ts
        exports a class AppModule
        This class is bootstraped with (wrapped with)  AppComponent exported from app.component.ts file
    3. app.component.ts
        Exports class AppComponent
        Wraps the template in app.component.html

Components!
    A normal ts file where we define a component which can be reused.
    Each component is associated with Component decorater from "@angular/core" module which takes two main
    param: 
        1. Selector 
        2. template
    ex: @Component({
            selector: 'app-server',
            templateUrl: './server.component.html'
        })

Generate components automatically:
    ==> ng g c servers    Observables
    ==> ng generate component servers
    Creates servers folder in app wiht the servers.component.ts , servers.compoment.html, servers.compoment.css
    and servers.compoment.spec.ts

Multiple ways to use component selector:
    selector: 'app-server'  //as a html tag
    usage: <app-server></app-server>

    selector: '[app-server]'  //as an attribute
    usage: <div app-server></div>

    selector: '.app-server' //as a class
    usage: <div class="app-server"></div>


AppModule
    1. exported from app.module.ts
    2. It is mainly used to bundle the different components in your app into packages.
    3. Just a class which is decorated by the NgModule decorator

    The NgModule Decorator:
        Takes 4 properties:
            1. bootstrap: which component should you recognise in the index.html file
            2. declarations: register all the components here

Databinding
    1. String Interpolation
    2. Property Binding
    3. Event Binding
    4. Two way binding

String Interpolation
    Any variable declared inside the component class can be access within {{ <variable name here > }}.
    This is curly braces just convert the incoming value into string, hence you can use a function call also 
    inside this.

Property Binding
    When to use this? 
    When you want to control the property of a HTMl tag using the component variables. Ex:
        <p>{{ allowNewServer }} : value comes from string interpolation</p>
        <p [innerText]="allowNewServer"></p>
    
    NOTE: Warp the html property with [] to link it to the variable

Event Binding
    Similar to property binding, but instead of [], you wrap the event listener property by (). Ex:
        <button class="btn btn-primary" (click)="onCreateServer()">Add Server</button>
    Before warapping the events, remove the on as shown above.
        onclick => (click)

Bindable Properties and Events
    How do you know to which Properties or Events of HTML Elements you may bind? You can basically bind to all Properties
    and Events - a good idea is to console.log()  the element you're interested in to see which properties and events it offers.
    
    Important: For events, you don't bind to onclick but only to click (=> (click)).
    The MDN (Mozilla Developer Network) offers nice lists of all properties and events of the element you're interested in. 
    Googling for YOUR_ELEMENT properties  or YOUR_ELEMENT events  should yield nice results.

Using the event object:
    <input type="text" (input)="onServerNameChange($event)">

    $event is the special syntax that angular uses to apss the event object into the function.


    In the function you must typecast the event.target since its of tye HTMLInputElement, typescript rules. 
        onServerNameChange(event: Event) {
            this.serverName = (<HTMLInputElement>event.target).value;
        }


TWO WAY Binding
Required for Two-Way-Binding!
    Important: For Two-Way-Binding (covered in the next lecture) to work, you need to enable the ngModel  directive. 
    This is done by adding the FormsModule  to the imports[]  array in the AppModule.
    You then also need to add the import from @angular/forms  in the app.module.ts file:
        import { FormsModule } from '@angular/forms';

Two way binding:
    Combination of Property binding and event binding.
    Done using ngModel directive

Directives
    They are instructions in the DOM.
    Couple of useful directives:
        1. ngIf : used in html dom, must be prefiexed with * . Also can be clubbed with else:
            <p *ngIf="serverCreated; else noServer">{{ serverName }}</p>
            <ng-template #noServer>
                <p >No server was created</p>
            </ng-template>
        2. ngStyle: dynamically assign a style
        3. ngClass: dynmaically add/remove css class
        5. ngFor

ngClass and ngStyle example
    <li
        class="list-group-item"
        [ngClass]="{ odd: odd % 2 !== 0}"
        [ngStyle]="{background: odd % 2 !== 0 ? 'yellow' : 'transparent'}"
        *ngFor="let odd of oddNumbers">
        {{ odd }}
    </li>

Strutural directives vs Attribute directives
    Structural: these are the ones used with * in the front. Ex: ngFor, ngIf
        They affect the entire DOM, they destroy the element if the condition is not true hence they
        are called structural.
    Attribute: These look like html attributes itself. Ex: ngStyle, ngClass
        They do not destroy the element instead affect the way its rendered.
        
ngFor using index
    Ex: *ngFor="let server in servers; let i=index"

Shortcut to creating components
    1. ng g c recepies --spec false
        Does not create spec file
    2. ng g c recepies/recepie-list --spec false
        Creates a component recepie-list within the recepies folder


Debugging Angular app:
    1. Use debugger to pause on logical errors
    2. Error message in console
    3. Use the chrome extension Augury (really cool)


BINDING CUSTOM/OWN Properties
    How do you bind a property of parent component to a child component. Example:
        <app-server [server]="serverElement"></app-server>

    Where serverElement is a property of the app component and server is of app-server component (child).
    Simple, we need to Import Input from 'angular/core' and use this to indicate that it is a property that
    will be assgined from outside.
        import { Component, Input } from 'anuglar/core';

        @Component({
            selector: 'app-server',
            template: './app.server.html'
        })
        export class Server {
            @Input() server: {name: string, status: string}
        }

    By doing this way, we assign serverElement to server of app-server. 

    ALIAS: use it as below
        @Input('serverDetails') server: {name: string, status: string} //access with serverDetails in parent.


BINDING CUSTOM/OWN Events
    The idea here is simple. We have to manipulate some data in parent element based on some action performed in child 
    component. How you can do is? You create a custom event in the child element that calls one of the function 
    defined in the parent component.
        <app-server (addServer)="onServerAdded($event)"></app-server>
    
    In the above, onServerAdded is a function that is defined in the AppComponent class. So the child looks like below
    after it uses Output from 'angular/core' to infrom that is is a property that calls one of the properties of the parent,
        import { Component, Output, EventEmitter } from 'anuglar/core';

        @Component({
            selector: 'app-server',
            template: './app.server.html'
        })
        export class Server {
            serverName = '';
            status = '';
            @Output() addServer = new EventEmitter<{name: string, status: string}>();

            onAddedServer() {
                this.addServer.emit({
                    name: this.serverName,
                    status: this.status
                })
            }
        }

    In the above, onAddedServer is an actual fuction called when user clicks something and then the event emitter sends
    the new event upon which the parents function onServerAdded gets called.

    If we observe closely, the above two methods define how our html and javascript works together. 
    This is how(maybe cause am not sure) events and properties are coded at the basic level using C. AWESOOOOME.


View Encapsulation
    When you oberve the rendered HTML source, you can see that angular adds different attributes to each of the html
    elements that are associated with particular CSS. 
    The CSS defined in the css file of the component is applied to that component only but ideally CSS doesn't work like
    that. You can manipulate this behaviour by using ViewEncpsulation
        import { Component, ViewEncapsulation } from 'angular/core'
        @Component({
            selector: 'app-server-element',
            templateUrl: './server-element.component.html',
            styleUrls: ['./server-element.component.css'],
            encapsulation: ViewEncapsulation.Emulated
        })
    
    ViewEncapsulation has three values:
        1. none : this will apply the css globally
        2. emulated: default configuration, applies css of a component to that component itself
        3. native: only with browsers that support shadow DOM


Local Template References
    What if i could geta reference of an HTML element and pass it around?
        <input type="text" #serverInput >
        <button (click)="addServer(serverInput)">Submit</button>

        addServer(serverInput: HTMLInputElement) {
            //do something with serverInput
        }

    Its the same as dynamic binding using ngModel but here you pass the input element itself.
    Please note that the serverInput is of type HTMLInputElement.


Access Template & DOM using @ViewChild
    We can use this decorator to bind the property of a component to an ElementRef using the local template reference. 
    ElementRef is a reference to the HTML element but not of type HTMLInputElement, it is a custom type defined
    only in angular and not javascript. It must be imported from 'angular/core'.
        <input type="text" #serverInput >
        <button (click)="addServer(serverInput)">Submit</button>

        import { Component, ViewChild, ElementRef } from 'angular/core'
        @Component({
            selector: 'app-server-element',
            templateUrl: './server-element.component.html',
            styleUrls: ['./server-element.component.css']
        })
        export class ServerElement {
            @ViewChild('serverInput', { static: true }) serverInput: ElementRef;

            addServer() {
                console.log(serverInput.nativeElement.value); //use native method on ElementRef to access the HTML element
            }
        }

@ViewChild() in Angular 8
    In Angular 8, the @ViewChild() syntax which you'll see in the next lecture needs to be changed slightly:
    Instead of:
        @ViewChild('serverContentInput') serverContentInput: ElementRef;
    use
        @ViewChild('serverContentInput', {static: true}) serverContentInput: ElementRef;
    The same change (add { static: true } as a second argument) needs to be applied to ALL usages of @ViewChild() 
    (and also @ContentChild() which you'll learn about later) IF you plan on accessing the selected element inside of ngOnInit().
    If you DON'T access the selected element in ngOnInit (but anywhere else in your component), set static: false instead!
    This is a temporary adjustment which will NOT be required anymore once Angular 9 is released!


ng-content directive
    Imagine situation where you cannnot bing the properties of parent element to the child element using the custom binding
    methods, for example when you need to bind a large number of data. 
    At times like that we can write the childeren HTML to be rendered within the declaration of the component itself, Ex:
        <app-server-element *ngFor="let serverElement of serverElements">
            <p>
                <strong *ngIf="serverElement.type === 'server'" style="color: red">{{ serverElement.content }}</strong>
                <em *ngIf="serverElement.type === 'blueprint'">{{ serverElement.content }}</em>
            </p>
        </app-server-element>

    The app-server.component.html looks like this,
        <div class="main">
            <div class="row">
                <ng-content></ng-content>
            </div>
        </div>

    The HTML code defeined between app-server-element gets rendered where <ng-content></ng-content> is present.


LifeCycle methods
    1. ngOnChanges : this is called at the starting and again whenever the property bound by the @Input decorator
        changes.
    2. ngOnInit: only when component is initialized (doesn't mean that it was added to DOM, just basic initialization
        is done). It is run after the constructor.
    3. ngDoCheck: called change detection run, even property change in component property or html dom change.
    4. ngAfterContentInit: called after content (ng-content) has been projected into the View
    5. ngAfterContentChecked: called everytime the projected content has been checked
    6. ngAfterViewInit: called after component's view and child views has been initialized
    7. ngAfterViewChecked: called every time the view and child views have been checked
    8. ngOnDestroy: called once component is about to be destroyed

@ContentChild() in Angular 8
    In Angular 8, the @ContentChild() syntax which you'll see in the next lecture needs to be changed slightly:
    Instead of:
        @ContentChild('contentParagraph') paragraph: ElementRef;
    use
        @ContentChild('contentParagraph', {static: true}) paragraph: ElementRef;
    The same change (add { static: true } as a second argument) needs to be applied to ALL usages of @ContentChild() if you 
    use the selected element inside of ngOnInit (as we do it in the lectures).
    If you DON'T use the selected element in ngOnInit, set static: false instead.

When to use @ContentChild()
    How to access the content that is renedered in parent component using ng-content?
        <app-server-element *ngFor="let serverElement of serverElements">
            <p #contentChildFromParent>
                <strong *ngIf="serverElement.type === 'server'" style="color: red">{{ serverElement.content }}</strong>
                <em *ngIf="serverElement.type === 'blueprint'">{{ serverElement.content }}</em>
            </p>
        </app-server-element>

    The app-server.component.html looks like this,
        <div class="main">
            <div class="row">
                <ng-content></ng-content>
            </div>
        </div>

    Usage in component code: 
        @ContentChild('contentChildFromParent') contentChildFromParent: ElementRef;


CREATING Directives
    Three methods:
        1. Basic
        2. Better than basic
        3. Structuraal directive


Basic Directives
    Below is an example of basic directive, you must not use this more often cause this can create problems in advance 
    cases like using a Service worker where a DOM moght not be present. Note the first argument of constructor is of type
    ElementRef which gets the element itself (declare it as private so its accessible throughout the class).

        import { Directive, ElementRef, OnInit } from '@angular/core';

        @Directive({
            selector: '[appBasicHighlight]'
        })
        export class BasicHighlightDirective implements OnInit {
            constructor(private elementRef: ElementRef) {
            }

            ngOnInit() {
                this.elementRef.nativeElement.style.backgroundColor = 'green';
            }
        }

    Usage in HTML page,
        <p appBasicHighlight>Style me colorusing basic diective highlighter</p>


Better than Basic:
    1. constructor receives two arguments: elementRef and Renderer2
    2. We can assign the color of the paragraph using the the renderer in ngOnInit (see the commented line)
    3. We can add some dynamic css by listening to events on the element, by using Hostlistener.
        HostListener takes the event as argument and calls the function defined next to it when the event occurs.
        You can see that i add and remove the background colour using the renderer here (both commented lines).
    4. Better way to do it is by using HostBinding:
        Use host binding to bind an actual property of the element, for example style.background . Angular now binds the
        background property (css) to a variable.
        Now toggle this value upon mouseenter and mouseleave.
    5. You can assign this value dynamically using the custom property binding. 

            import { Directive, OnInit, ElementRef, Renderer2, HostListener, HostBinding, Input } from '@angular/core';

            @Directive({
                selector: "[appBetterHighlight]"
            })
            export class BetterHighlightDirective implements OnInit {
                @Input() defaultColor: string = 'transparent';
                @Input('appBetterHighlight') highlightColor: string = 'blue';
                @HostBinding('style.backgroundColor') backgroundColor: string;

                constructor( private eleRef: ElementRef, private renderer: Renderer2) {}

                ngOnInit() {
                    this.backgroundColor = this.defaultColor;
                // this.renderer.setStyle(this.eleRef.nativeElement, 'background-color', 'blue');
                }

                @HostListener('mouseenter') mouseover(eventData: Event) {
                    //this.renderer.setStyle(this.eleRef.nativeElement, 'background-color', 'blue');
                    this.backgroundColor = this.highlightColor;
                }

                @HostListener('mouseleave') mouseleft(eventData: Event) {
                    //this.renderer.setStyle(this.eleRef.nativeElement, 'background-color', 'transparent');
                    this.backgroundColor = this.defaultColor;
                }
            }

    HTML usage:
            <p [appBetterHighlight]="'pink'" defaultColor="green">Style me using better diective highlighter </p>
        You can observe above, [defaultColor]="'green'" ==> defaultColor="green".


Custom STRUCTURAL Directives
    Constructor takes two different directive here, mainly a templateRef and a ViewContainerRef.
    What happens when you a structural directive?
    A simple code like below, get transfromed behind the scenes into a ng-template bound element.
        <div *ngIf="...">...</div>
    becomes:
        <ng-template [ngIf]="...">
            <div>...<div>
        </ng-template>

    With that in mind, we must add a setter that has the same name as the selector to receive a boolean and do something with
    that boolean condition.
        import { Directive, Input, TemplateRef, ViewContainerRef } from "@angular/core";

        @Directive({
            selector: '[appUnless]'
        })
        export class UnlessDirective {
            @Input() set appUnless(condition: boolean) {
                if (!condition) {
                    this.vcRef.createEmbeddedView(this.templateRef);
                } else {
                    this.vcRef.clear();
                }
            }

            constructor(private templateRef: TemplateRef<any>, private vcRef: ViewContainerRef) {}
        }
    
    HTML Usage:
        <div *appUnless="onlyOdd">
            <li
              class="list-group-item"
              [ngClass]="{ odd: odd % 2 !== 0}"
              [ngStyle]="{background: odd % 2 !== 0 ? 'yellow' : 'transparent'}"
              *ngFor="let odd of oddNumbers">
              {{ odd }}
            </li>
        </div>


ngSwitch
    Note the syntax od usage of ngSwitch and the cases.
        <div [ngSwitch]="value">
            <p *ngSwitchCase="5">5</p>
            <p *ngSwitchCase="10">10</p>
            <p *ngSwitchDefault>Default</p>
        </div>

Services and Dependency Injection
    Services are normal classes that can be used to manipulate date data. This way we can write a leaner and
    cleaner code.
    For example: It we have a functionality where we list some number of users as active and inactive. 
    The users are defined in the main app component and are manipulated to active and inactive components.
    The users are passed as inputs to the active and inactive components, and recieves an output event emitter.

    We can now use a service class to manage this and remove all the inpput and ouput methods.
            import { Injectable } from "@angular/core";
                import { CounterService } from "./counter.service";

                @Injectable()
                export class UsersService {
                activeUsers = ['Max', 'Anna'];
                inactiveUsers = ['Chris', 'Manu'];

                constructor(private counterService: CounterService) {}

                addToInactive(id: number) {
                    this.inactiveUsers.push(this.activeUsers[id]);
                    this.activeUsers.splice(id, 1);
                    this.counterService.incrementToInactive();
                }

                addToActive(id: number) {
                    this.activeUsers.push(this.inactiveUsers[id]);
                    this.inactiveUsers.splice(id, 1);
                    this.counterService.incrementToActive();
                }
            }

    Injecting a service to a component
        Add as provider in the class and then add it in the constructor as a private varaible.
        Why add a private vaiable in constructor?
        This will create am instance of the service.

            @Component({
                selector: 'app-inactive-users',
                templateUrl: './inactive-users.component.html',
                styleUrls: ['./inactive-users.component.css'],
                provider: [UsersService]
            })
            export class InactiveUsersComponent implements OnInit {
                users: string[];

                constructor(private usersService: UsersService) {}

                ngOnInit(): void {
                    this.users = this.usersService.inactiveUsers;
                }

                onSetToActive(id: number) {
                    this.usersService.addToActive(id);
                }
            }

    
Hierarchial Services:
    1. You declare a service in app.component and all the child component will receive this instance but dont add as provider
        in child components unless you want a new instance there.
    2. Make sure you add in constructor in every child component.
    3. Add in providers of app.module.ts to have the service instance available globally.

Cross component services:
    Inject a service and also use an event emitter. This eventemitter can be used to emit events in one components and
    subscribe to them in another.























Typescript
    1. Initialize a varaible with certain type
        class Test {
            public name: string;
        }

        By default it is public if the variable is not declared as public.
        Declared as private means it cant be accessed from outside the class.

    2. Initialize variables using constructor
        Two ways exist:
            class Test {
                public name: string;
                public amount: number;

                constructor(name: string, amount: number) {
                    this.name = name;
                    this.amount = amount;
                }
            }

            class Test {
                constructor(public name: string, public amount: number) {}
            }

    3. Indicate variable as an array of certain type
        public recipes: Recipe[] = [];

    4. Define property as an object
        element: {type: string, name: string};

    5. Define the return type of a class
        addServer = new EventEmitter<{name: string, status: string}>();

    6. Return type of a function in class
        ngOnInit () : void {
            ...
        }

